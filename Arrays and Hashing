Arrays and HAshing :

1. Duplicate Values : HashMap

import java.util.*;
import java.util.HashMap;
class Main {
    public static void main(String[] args) {
        int[] ar={1,5,2,8,6,7};
        System.out.println(Duplicate(ar));
    }
    public static boolean Duplicate(int[] arr)
    {
        HashMap<Integer,Integer>map=new HashMap<>();
        for(int num  : arr)
        {
            map.put(num,map.getOrDefault(num,0)+1);
        }
        for(Integer m:map.keySet())
        {
            if(map.get(m)!=1)
            {
                return true;
            }
        }
        return false;
    }
}

2. Using Sorting Techniue : 

import java.util.*;
import java.util.HashMap;
class Main {
    public static void main(String[] args) {
        int[] ar={1,5,2,8,6,7,8};
        System.out.println(Duplicate(ar));
    }
    public static boolean Duplicate(int[] arr)
    {
        Arrays.sort(arr);
        for(int i=0;i<arr.length-1;i++)
        {
            if(arr[i]==arr[i+1])
            {
                return true;
            }
        }
        return false;
    }
}

3. HashSet : Length of array == Size of Set -> No duplicates

import java.util.*;
import java.util.HashMap;
class Main {
    public static void main(String[] args) {
        int[] ar={1,5,2,8,8};
        System.out.println(Duplicate(ar));
    }
    public static boolean Duplicate(int[] arr)
    {
       HashSet<Integer> h = new HashSet<>();
        for(int num:arr)
        {
            h.add(num);
        }
        if(h.size()==arr.length)
        {
            return false;
        }
        else
        {
            return true;
        }
    }
}


